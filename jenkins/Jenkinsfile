pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Environment to deploy to'
        )
        choice(
            name: 'CLOUD_PROVIDER',
            choices: ['aws', 'azure', 'both'],
            description: 'Cloud provider to deploy to'
        )
        booleanParam(
            name: 'DESTROY_INFRASTRUCTURE',
            defaultValue: false,
            description: 'Destroy infrastructure instead of deploying'
        )
    }
    
    environment {
        TF_VAR_environment = "${params.ENVIRONMENT}"
        TF_VAR_cloud_provider = "${params.CLOUD_PROVIDER}"
        // Add Homebrew paths for macOS
        PATH = "/opt/homebrew/bin:/usr/local/bin:${env.PATH}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "üöÄ Multi-Cloud Pipeline Started"
            }
        }
        
        stage('Setup') {
            steps {
                script {
                    echo "üîß Setting up environment..."
                    sh '''
                        echo "Current PATH: $PATH"
                        which terraform || echo "Terraform not found in PATH"
                        terraform --version || echo "Please install Terraform"
                        
                        echo "Checking AWS CLI..."
                        which aws || echo "AWS CLI not found"
                        
                        echo "Checking Azure CLI..."
                        which az || echo "Azure CLI not found"
                    '''
                }
            }
        }
        
        stage('Validate') {
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'azure-client-id', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'azure-subscription-id', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'azure-tenant-id', variable: 'ARM_TENANT_ID')
                    ]) {
                        script {
                            echo "üîç Validating Terraform configuration..."
                            
                            sh '''
                                echo "Initializing Terraform..."
                                terraform init -backend=false
                                
                                echo "Validating Terraform syntax..."
                                terraform validate
                                
                                echo "Checking Terraform format..."
                                terraform fmt -check=true || echo "Format check completed"
                            '''
                            
                            echo "‚úÖ Terraform validation completed successfully"
                        }
                    }
                }
            }
        }
        
        stage('Plan') {
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'azure-client-id', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'azure-subscription-id', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'azure-tenant-id', variable: 'ARM_TENANT_ID')
                    ]) {
                        script {
                            echo "üìã Creating Terraform plan..."
                            
                            if (params.DESTROY_INFRASTRUCTURE) {
                                sh '''
                                    terraform init
                                    terraform plan -destroy \
                                        -var="environment=${ENVIRONMENT}" \
                                        -var="cloud_provider=${CLOUD_PROVIDER}" \
                                        -out=destroy.tfplan
                                '''
                                echo "üî• Destroy plan created"
                            } else {
                                sh '''
                                    terraform init
                                    terraform plan \
                                        -var="environment=${ENVIRONMENT}" \
                                        -var="cloud_provider=${CLOUD_PROVIDER}" \
                                        -out=deploy.tfplan
                                '''
                                echo "üöÄ Deploy plan created"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Apply') {
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'azure-client-id', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'azure-subscription-id', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'azure-tenant-id', variable: 'ARM_TENANT_ID')
                    ]) {
                        script {
                            if (params.DESTROY_INFRASTRUCTURE) {
                                echo "üî• DESTROYING INFRASTRUCTURE üî•"
                                sh "terraform apply -auto-approve destroy.tfplan"
                                echo "‚úÖ Infrastructure destroyed successfully"
                            } else {
                                echo "üöÄ DEPLOYING INFRASTRUCTURE üöÄ"
                                sh "terraform apply -auto-approve deploy.tfplan"
                                echo "‚úÖ Infrastructure deployed successfully"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Output') {
            when {
                expression { params.DESTROY_INFRASTRUCTURE == false }
            }
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'azure-client-id', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'azure-subscription-id', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'azure-tenant-id', variable: 'ARM_TENANT_ID')
                    ]) {
                        script {
                            echo "üìä Displaying deployment outputs..."
                            
                            sh '''
                                echo "=== TERRAFORM OUTPUTS ==="
                                terraform output -json > outputs.json || echo "No outputs available"
                                
                                if [ -f outputs.json ]; then
                                    echo "Raw outputs:"
                                    cat outputs.json
                                    echo ""
                                    
                                    # Extract and display key information
                                    echo "=== DEPLOYMENT SUMMARY ==="
                                    
                                    # AWS outputs
                                    if terraform output aws_public_ip 2>/dev/null; then
                                        AWS_IP=$(terraform output -raw aws_public_ip)
                                        echo "üåê AWS Application: http://$AWS_IP"
                                        echo "üè• AWS Health Check: http://$AWS_IP/health"
                                    fi
                                    
                                    # Azure outputs  
                                    if terraform output azure_public_ip 2>/dev/null; then
                                        AZURE_IP=$(terraform output -raw azure_public_ip)
                                        echo "üåê Azure Application: http://$AZURE_IP"  
                                        echo "üè• Azure Health Check: http://$AZURE_IP/health"
                                    fi
                                fi
                            '''
                        }
                    }
                }
            }
        }
        
        stage('Health Check') {
            when {
                expression { params.DESTROY_INFRASTRUCTURE == false }
            }
            steps {
                dir('terraform') {
                    script {
                        echo "üè• Running health checks..."
                        
                        sh '''
                            # Wait a bit for services to start
                            echo "Waiting 30 seconds for services to initialize..."
                            sleep 30
                            
                            # Test AWS if deployed
                            if [[ "${CLOUD_PROVIDER}" == "aws" || "${CLOUD_PROVIDER}" == "both" ]]; then
                                AWS_IP=$(terraform output -raw aws_public_ip 2>/dev/null || echo "")
                                if [[ -n "$AWS_IP" ]]; then
                                    echo "Testing AWS application at: http://$AWS_IP"
                                    for i in {1..3}; do
                                        if curl -f "http://$AWS_IP/health" --connect-timeout 10 --max-time 30; then
                                            echo "‚úÖ AWS health check passed"
                                            break
                                        else
                                            echo "‚ö†Ô∏è  AWS health check failed, retrying... ($i/3)"
                                            sleep 20
                                        fi
                                    done
                                fi
                            fi
                            
                            # Test Azure if deployed
                            if [[ "${CLOUD_PROVIDER}" == "azure" || "${CLOUD_PROVIDER}" == "both" ]]; then
                                AZURE_IP=$(terraform output -raw azure_public_ip 2>/dev/null || echo "")
                                if [[ -n "$AZURE_IP" ]]; then
                                    echo "Testing Azure application at: http://$AZURE_IP"
                                    for i in {1..3}; do
                                        if curl -f "http://$AZURE_IP/health" --connect-timeout 10 --max-time 30; then
                                            echo "‚úÖ Azure health check passed"
                                            break
                                        else
                                            echo "‚ö†Ô∏è  Azure health check failed, retrying... ($i/3)"
                                            sleep 20
                                        fi
                                    done
                                fi
                            fi
                        '''
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üèÅ Pipeline completed for environment: ${params.ENVIRONMENT}"
                echo "üåê Cloud provider: ${params.CLOUD_PROVIDER}"
                echo "üí• Action: ${params.DESTROY_INFRASTRUCTURE ? 'DESTROY' : 'DEPLOY'}"
            }
        }
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check the logs above for details."
        }
    }
}