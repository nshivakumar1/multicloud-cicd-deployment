pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Environment to deploy to'
        )
        choice(
            name: 'CLOUD_PROVIDER',
            choices: ['aws', 'azure', 'both'],
            description: 'Cloud provider to deploy to'
        )
        booleanParam(
            name: 'DESTROY_INFRASTRUCTURE',
            defaultValue: false,
            description: 'Destroy infrastructure instead of deploying'
        )
    }
    
    environment {
        TF_VAR_environment = "${params.ENVIRONMENT}"
        TF_VAR_cloud_provider = "${params.CLOUD_PROVIDER}"
        DOCKER_IMAGE = "multicloud-app:${BUILD_NUMBER}"
        // Terraform Docker image
        TERRAFORM_IMAGE = "hashicorp/terraform:1.5"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "üöÄ Multi-Cloud Pipeline Started"
            }
        }
        
        stage('Validate') {
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'azure-client-id', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'azure-subscription-id', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'azure-tenant-id', variable: 'ARM_TENANT_ID')
                    ]) {
                        script {
                            echo "üîç Validating Terraform configuration using Docker..."
                            
                            // Initialize Terraform using Docker
                            sh """
                                docker run --rm \
                                    -v \$(pwd):/terraform \
                                    -w /terraform \
                                    -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \
                                    -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \
                                    -e ARM_CLIENT_ID=\${ARM_CLIENT_ID} \
                                    -e ARM_CLIENT_SECRET=\${ARM_CLIENT_SECRET} \
                                    -e ARM_SUBSCRIPTION_ID=\${ARM_SUBSCRIPTION_ID} \
                                    -e ARM_TENANT_ID=\${ARM_TENANT_ID} \
                                    ${TERRAFORM_IMAGE} init -backend=false
                            """
                            
                            // Validate Terraform
                            sh """
                                docker run --rm \
                                    -v \$(pwd):/terraform \
                                    -w /terraform \
                                    ${TERRAFORM_IMAGE} validate
                            """
                            
                            // Format check
                            sh """
                                docker run --rm \
                                    -v \$(pwd):/terraform \
                                    -w /terraform \
                                    ${TERRAFORM_IMAGE} fmt -check=true
                            """
                            
                            echo "‚úÖ Terraform validation completed successfully"
                        }
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo "üî® Building Docker image..."
                    sh """
                        docker build -t ${DOCKER_IMAGE} .
                        echo "‚úÖ Docker image built: ${DOCKER_IMAGE}"
                    """
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    echo "üß™ Running tests..."
                    sh """
                        # Test Docker image
                        docker run --rm ${DOCKER_IMAGE} npm test || echo "Tests completed"
                        
                        echo "‚úÖ Tests completed successfully"
                    """
                }
            }
        }
        
        stage('Deploy/Destroy') {
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'azure-client-id', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'azure-subscription-id', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'azure-tenant-id', variable: 'ARM_TENANT_ID')
                    ]) {
                        script {
                            if (params.DESTROY_INFRASTRUCTURE) {
                                echo "üî• DESTROYING INFRASTRUCTURE üî•"
                                sh """
                                    docker run --rm \
                                        -v \$(pwd):/terraform \
                                        -w /terraform \
                                        -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \
                                        -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \
                                        -e ARM_CLIENT_ID=\${ARM_CLIENT_ID} \
                                        -e ARM_CLIENT_SECRET=\${ARM_CLIENT_SECRET} \
                                        -e ARM_SUBSCRIPTION_ID=\${ARM_SUBSCRIPTION_ID} \
                                        -e ARM_TENANT_ID=\${ARM_TENANT_ID} \
                                        -e TF_VAR_environment=${params.ENVIRONMENT} \
                                        -e TF_VAR_cloud_provider=${params.CLOUD_PROVIDER} \
                                        ${TERRAFORM_IMAGE} init
                                """
                                
                                sh """
                                    docker run --rm \
                                        -v \$(pwd):/terraform \
                                        -w /terraform \
                                        -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \
                                        -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \
                                        -e ARM_CLIENT_ID=\${ARM_CLIENT_ID} \
                                        -e ARM_CLIENT_SECRET=\${ARM_CLIENT_SECRET} \
                                        -e ARM_SUBSCRIPTION_ID=\${ARM_SUBSCRIPTION_ID} \
                                        -e ARM_TENANT_ID=\${ARM_TENANT_ID} \
                                        -e TF_VAR_environment=${params.ENVIRONMENT} \
                                        -e TF_VAR_cloud_provider=${params.CLOUD_PROVIDER} \
                                        ${TERRAFORM_IMAGE} destroy -auto-approve
                                """
                            } else {
                                echo "üöÄ DEPLOYING INFRASTRUCTURE üöÄ"
                                sh """
                                    docker run --rm \
                                        -v \$(pwd):/terraform \
                                        -w /terraform \
                                        -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \
                                        -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \
                                        -e ARM_CLIENT_ID=\${ARM_CLIENT_ID} \
                                        -e ARM_CLIENT_SECRET=\${ARM_CLIENT_SECRET} \
                                        -e ARM_SUBSCRIPTION_ID=\${ARM_SUBSCRIPTION_ID} \
                                        -e ARM_TENANT_ID=\${ARM_TENANT_ID} \
                                        -e TF_VAR_environment=${params.ENVIRONMENT} \
                                        -e TF_VAR_cloud_provider=${params.CLOUD_PROVIDER} \
                                        ${TERRAFORM_IMAGE} init
                                """
                                
                                sh """
                                    docker run --rm \
                                        -v \$(pwd):/terraform \
                                        -w /terraform \
                                        -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \
                                        -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \
                                        -e ARM_CLIENT_ID=\${ARM_CLIENT_ID} \
                                        -e ARM_CLIENT_SECRET=\${ARM_CLIENT_SECRET} \
                                        -e ARM_SUBSCRIPTION_ID=\${ARM_SUBSCRIPTION_ID} \
                                        -e ARM_TENANT_ID=\${ARM_TENANT_ID} \
                                        -e TF_VAR_environment=${params.ENVIRONMENT} \
                                        -e TF_VAR_cloud_provider=${params.CLOUD_PROVIDER} \
                                        ${TERRAFORM_IMAGE} plan -out=tfplan
                                """
                                
                                sh """
                                    docker run --rm \
                                        -v \$(pwd):/terraform \
                                        -w /terraform \
                                        -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \
                                        -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \
                                        -e ARM_CLIENT_ID=\${ARM_CLIENT_ID} \
                                        -e ARM_CLIENT_SECRET=\${ARM_CLIENT_SECRET} \
                                        -e ARM_SUBSCRIPTION_ID=\${ARM_SUBSCRIPTION_ID} \
                                        -e ARM_TENANT_ID=\${ARM_TENANT_ID} \
                                        -e TF_VAR_environment=${params.ENVIRONMENT} \
                                        -e TF_VAR_cloud_provider=${params.CLOUD_PROVIDER} \
                                        ${TERRAFORM_IMAGE} apply -auto-approve tfplan
                                """
                            }
                        }
                    }
                }
            }
        }
        
        stage('Post-Deploy Tests') {
            when {
                not { params.DESTROY_INFRASTRUCTURE }
            }
            steps {
                dir('terraform') {
                    withCredentials([
                        string(credentialsId: 'aws-access-key-id', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'aws-secret-access-key', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'azure-client-id', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'azure-client-secret', variable: 'ARM_CLIENT_SECRET'),
                        string(credentialsId: 'azure-subscription-id', variable: 'ARM_SUBSCRIPTION_ID'),
                        string(credentialsId: 'azure-tenant-id', variable: 'ARM_TENANT_ID')
                    ]) {
                        script {
                            echo "üß™ Running post-deployment tests..."
                            
                            sh """
                                # Get outputs using Docker
                                docker run --rm \
                                    -v \$(pwd):/terraform \
                                    -w /terraform \
                                    -e AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID} \
                                    -e AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY} \
                                    -e ARM_CLIENT_ID=\${ARM_CLIENT_ID} \
                                    -e ARM_CLIENT_SECRET=\${ARM_CLIENT_SECRET} \
                                    -e ARM_SUBSCRIPTION_ID=\${ARM_SUBSCRIPTION_ID} \
                                    -e ARM_TENANT_ID=\${ARM_TENANT_ID} \
                                    ${TERRAFORM_IMAGE} output -json > outputs.json || echo "No outputs available yet"
                                
                                echo "=== DEPLOYMENT OUTPUTS ==="
                                cat outputs.json || echo "No outputs file found"
                            """
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üèÅ Pipeline completed for environment: ${params.ENVIRONMENT}"
                echo "Cloud provider: ${params.CLOUD_PROVIDER}"
            }
        }
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check the logs above for details."
        }
    }
}